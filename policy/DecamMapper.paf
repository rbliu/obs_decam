#<?cfg paf policy ?>

needCalibRegistry: true

levels: {
    # Keys that are NOT relevant for a particular level
    skyTile: "visit" "ccdnum" "hdu" "ccd"
    tract: "patch"
    visit: "ccdnum" "hdu" "ccd"
    sensor: "none"
}
defaultLevel: "sensor"
defaultSubLevels: {
    skyTile: "sensor"
    visit: "sensor"
}

camera: "../decam/camGeom"

# exposures and datasets which are needed for all of the mappers are defined
# in the obs_base package (in either exposures.yaml or datasets.yaml).
# Where a modification to such a dataset is required for a particular camera,
# (e.g., for a template or specialized python type), the modification will
# appear in the definition below as a partial dataset definition.

exposures: {
    raw: {
        template:    "%(date)s/%(filter)s/decam%(visit)07d.fits.fz[%(hdu)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
    }
    postISRCCD: {
        template:    "%(visit)07d/postISR/postISR-%(visit)07d_%(ccdnum)02d.fits"
    }
    instcal: {
        template:    "%(visit)07d/instcal%(visit)07d.fits.fz[%(hdu)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
    }
    dqmask: {
        template:    "%(visit)07d/dqmask%(visit)07d.fits.fz[%(hdu)d]"
        python:      "lsst.afw.image.ImageU"
        persistable: "ImageU"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
    }
    wtmap: {
        template:    "%(visit)07d/wtmap%(visit)07d.fits.fz[%(hdu)d]"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
    }
    icExp: {
        template:    "%(visit)07d/icExp/icExp-%(visit)07d_%(ccdnum)02d.fits"
    }
    calexp: {
        template:    "%(visit)07d/calexp/calexp-%(visit)07d_%(ccdnum)02d.fits"
    }
    wcs: {
        template:    "%(visit)07d/calexp/wcs-%(visit)07d_%(ccdnum)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
    }

    deepCoadd_tempExp: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)stempExp/v%(visit)d-f%(filter)s.fits"
    }
    deepDiff_differenceExp: {
        template:      "deepDiff/v%(visit)d/diffexp-%(ccdnum)02d.fits"
    }
    deepDiff_matchedExp: {
        template:      "deepDiff/v%(visit)d/matchexp-%(ccdnum)02d.fits"
    }
}

calibrations: {
    bias: {
        template:    "BIAS/%(calibDate)s/BIAS-%(calibDate)s-%(ccdnum)02d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "bias"
        columns:     "date"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      false
        validRange:  true
        obsTimeName: date
    }
    dark: {
        template:    "DARK/%(calibDate)s/DARK-%(calibDate)s-%(ccdnum)02d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "dark"
        columns:     "date"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      false
        validRange:  true
        obsTimeName: date
    }
    flat: {
        template:    "FLAT/%(calibDate)s/%(filter)s/FLAT-%(calibDate)s-%(ccdnum)02d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "flat"
        columns:     "filter" "date"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      true
        validRange:  true
        obsTimeName: date
    }
    fringe: {
        template:    "FRINGE/%(calibDate)s/%(filter)s/FRINGE-%(calibDate)s-%(ccdnum)02d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "fringe"
        columns:     "filter" "ccdnum"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      true
        validRange:  false
    }
    cpBias: {
        # Given that MasterCal hdu number is identical to ccdnum
        template:    "%(path)s[%(ccdnum)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "bias"
        columns:     "date"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      false
        validRange:  true
        obsTimeName: date
    }
    cpFlat: {
        template:    "%(path)s[%(ccdnum)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "flat"
        columns:     "filter" "date"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      true
        validRange:  true
        obsTimeName: date
    }
    defects: {
        template:    "%(path)s"
        python:      "lsst.afw.image.ImageU"
        persistable: "ImageU"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "defect"
        columns:     "date" "ccdnum"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      false
        validRange:  true
        obsTimeName: date
    }
}

datasets: {

    icSrc: {
        template:      "%(visit)07d/icSrc/icSrc-%(visit)07d_%(ccdnum)02d.fits"
    }
    src: {
        template:      "%(visit)07d/src/src-%(visit)07d_%(ccdnum)02d.fits"
    }
    icMatch: {
        template:      "%(visit)07d/icMatch/icMatch-%(visit)07d_%(ccdnum)02d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    srcMatch: {
        template:      "%(visit)07d/srcMatch/srcMatch-%(visit)07d_%(ccdnum)02d.fits"
    }
    icExpBackground: {
        template:      "%(visit)07d/icExp/icExpBackground-%(visit)07d_%(ccdnum)02d.fits"
    }
    calexpBackground: {
        template:      "%(visit)07d/bkgd/bkgd-%(visit)07d_%(ccdnum)02d.fits"
    }
    processCcd_metadata: {
        template:      "%(visit)07d/metadata/metadata-%(visit)07d_%(ccdnum)02d.boost"
    }
    isr_config: {
        python:        "lsst.obs.decam.isr.DecamIsrConfig"
    }
    isr_metadata: {
        template:      "%(visit)07d/metadata/metadata-%(visit)07d_%(ccdnum)02d.boost"
    }
    characterizeImage_metadata: {
        template:      "%(visit)07d/metadata/metadata-%(visit)07d_%(ccdnum)02d.boost"
    }
    calibrate_metadata: {
        template:      "%(visit)07d/metadata/metadata-%(visit)07d_%(ccdnum)02d.boost"
    }
    deep_makeCoaddTempExp_metadata: {
        template:      "deepCoadd/%(filter)s/%(tract)d/%(patch)s/makeCoaddTempExpMD.boost"
    }
    deep_safeClipAssembleCoadd_config: {
        template:      "config/deep_assembleCoadd.py"
    }
    deep_safeClipAssembleCoadd_metadata: {
        template:      "deepCoadd/%(filter)s/%(tract)d/%(patch)s/assembleCoaddMD.boost"
    }
    deepCoadd_srcMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
    }
    detectCoaddSources_config: {
        template:      "config/detectCoadd.py"
    }
    detectCoaddSources_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/detectCoaddMD.boost"
    }
    measureCoaddSources_config: {
        template:      "config/measureMergedCoadd.py"
    }
    measureCoaddSources_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/measMD.boost"
    }
    mergeCoaddMeasurements_metadata: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeMeasMD.boost"
    }
    forcedPhotCcd_metadata: {
        template:      "forced/%(filter)s/%(tract)d/forcedPhotCcd_metadata/%(visit)07d-%(ccdnum)03d.boost"
    }
    forced_src: {
        template:      "forced/%(filter)s/%(tract)d/forcedSrc-%(visit)07d-%(ccdnum)03d.fits"
    }
    deepCoadd_forced_metadata: {
        template:      "deepCoadd-results/forcedPhotCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
    }
    deepCoadd_forced_src: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/forcedSrc-%(filter)s-%(tract)d-%(patch)s.fits"
    }
    deepDiff_metadata: {
        template:      "deepDiff/v%(visit)d/metadata-%(ccdnum)02d.boost"
    }
    deepDiff_diaSrc: {
        template:      "deepDiff/v%(visit)d/diaSrc-%(ccdnum)02d.fits"
    }
    deepDiff_kernelSrc: {
        template:      "deepDiff/v%(visit)d/kernelSrc-%(ccdnum)02d.fits"
    }
    singleFrameDriver_metadata: {
        template:      "%(pointing)05d/%(filter)s/singleFrameDriver_metadata/%(visit)07d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw  
        tables:        raw_visit
    } 
}
